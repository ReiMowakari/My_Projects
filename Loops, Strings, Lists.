Exercise №1
list_fruits = ['Apple', 'Banana', 'Kiwi', 'Watermelon']
for fruits in range(len(list_fruits)):
    print(str(fruits + 1) + '. ' + '{:>20}'.format(str(list_fruits[fruits])))

Exercise №2
list_one = []
list_two = []
list_one = set(list_one) - set(list_two)
print(list_one)

Exercise №3
list_curr = []
new_list = []
for element in list_curr:
    if element % 2 == 0:
        new_list.append(element / 4)
    else:
        new_list.append(element * 2)
print(new_list)

Exercise №4
import math
from math import sqrt
list_curr = [2, -5, 8, 9, -25, 25, 4]
new_list = []
for element in list_curr:
    if element > 0 and sqrt(element) % 1 == 0:
        new_list.append(int(sqrt(element)))
print(new_list)

"""
Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, 
пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, 
что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.
"""

a = int(input())
s = a
n = 0 + a
while s != 0:
    a = int(input())
    s += a
    r = a*a
    n += r
    if s == 0:
        break
print(n)

"""
Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. 
Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.
Напишите программу, на вход которой даются четыре числа aa, bb, cc и dd, каждое в своей строке. 
Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a; b][a;b] на все числа отрезка [c;d][c;d].
Числа aa, bb, cc и dd являются натуральными и не превосходят 10, a \le ba≤b, c \le dc≤d.
Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции. 
Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы.
"""

a, b, c, d = int(input()), int(input()), int(input()), int(input())
for j in range(c, d+1):
    print('\t', str(j), end='')
print(end='\n')
for i in range(a, b+1):
    print(str(i)+'\t', end='')
    for j in range(c, d+1):
        j = i * j
        print(str(j), end='\t')
    print(end='\n')
    
"""
Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, 
который сжимает повторяющиеся символы в строке.
Кодирование осуществляется следующим образом:
s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.
Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.
"""

dna = input()
l = len(dna)
ch = 1
for i in range(l):
    if i == (l - 1):
        print(dna[i] + str(ch), end='')
    else:
        if dna[i] == dna [i + 1]:
            ch = ch + 1
        else:
            print(dna[i] + str(ch), end='')
            ch = 1
"""
Напишите программу, на вход которой подаётся список чисел одной строкой. 
Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
Если на вход пришло только одно число, надо вывести его же.
Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.
"""

a = [int(i) for i in input().split()]
l = len(a)-1
for i in range(0, len(a)):
    if len(a) == 1:
        print(str(a[0]), end='')
        break
    if i < l:
        s = a[i-1] + a[i+1]
        print(str(s), end=' ')
        i = i + 1
    else:
        s = a[i-1] + a[0]
        print(str(s), end=' ')
"""

"""
